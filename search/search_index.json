{
    "docs": [
        {
            "location": "/",
            "text": "MkDocs\n\n\nProject documentation with\u00a0Markdown.\n\n\n\n\nOverview\n\n\nMkDocs is a \nfast\n, \nsimple\n and \ndownright gorgeous\n static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.\n\n\nHost anywhere\n\n\nMkDocs builds completely static HTML sites that you can host on GitHub pages,\nAmazon S3, or \nanywhere\n else you choose.\n\n\nGreat themes available\n\n\nThere's a stack of good looking themes available for MkDocs. Choose between\nthe built in themes: \nmkdocs\n and \nreadthedocs\n, select one of the 3rd\nparty themes in the \nMkDocs wiki\n, or \nbuild your own\n.\n\n\nPreview your site as you work\n\n\nThe built-in dev-server allows you to preview your documentation as you're\nwriting it. It will even auto-reload and refresh your browser whenever you save\nyour changes.\n\n\nEasy to customize\n\n\nGet your project documentation looking just the way you want it by customizing\nthe theme.\n\n\n\n\nInstallation\n\n\nInstall with a Package Manager\n\n\nIf you have and use a package manager (such as \napt-get\n, \ndnf\n, \nhomebrew\n,\n\nyum\n, \nchocolatey\n, etc.) to install packages on your system, then you may\nwant to search for a \"MkDocs\" package and, if a recent version is available,\ninstall it with your package manager (check your system's documentation for\ndetails). That's it, you're done! Skip down to \nGetting Started\n.\n\n\nIf your package manager does not have a recent \"MkDocs\" package, you can still\nuse your package manager to install \"Python\" and \"pip\". Then you can use pip to\n\ninstall MkDocs\n.\n\n\nManual Installation\n\n\nIn order to manually install MkDocs you'll need \nPython\n installed on your\nsystem, as well as the Python package manager, \npip\n. You can check if you have\nthese already installed from the command line:\n\n\n$ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2\n\n\n\n\nMkDocs supports Python versions 2.7, 3.3, 3.4, 3.5 and pypy.\n\n\nInstalling Python\n\n\nInstall \nPython\n by downloading an installer appropriate for your system from\n\npython.org\n and running it.\n\n\n!!! Note\n\n\nIf you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).\n\n![Add Python to PATH](img/win-py-install.png)\n\n\n\nInstalling pip\n\n\nIf you're using a recent version of Python, the Python package manager, \npip\n,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:\n\n\npip install --upgrade pip\n\n\n\n\nIf you need to install \npip\n for the first time, download \nget-pip.py\n.\nThen run the following command to install it:\n\n\npython get-pip.py\n\n\n\n\nInstalling MkDocs\n\n\nInstall the \nmkdocs\n package using pip:\n\n\npip install mkdocs\n\n\n\n\nYou should now have the \nmkdocs\n command installed on your system. Run \nmkdocs\n--version\n to check that everything worked okay.\n\n\n$ mkdocs --version\nmkdocs, version 0.15.3\n\n\n\n\n!!! Note\n    If you are using Windows, some of the above commands may not work\n    out-of-the-box.\n\n\nA quick solution may be to preface every Python command with `python -m`\nlike this:\n\n    python -m pip install mkdocs\n    python -m mkdocs\n\nFor a more permanent solution, you may need to edit your `PATH` environment\nvariable to include the `Scripts` directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example `C:\\Python34\\`), open the\n`Tools`, then `Scripts` folder, and run the `win_add2path.py` file by double\nclicking on it. Alternatively, you can [download][a2p] the script and run it\n(`python win_add2path.py`).\n\n\n\n\n\nGetting Started\n\n\nGetting started is super easy.\n\n\nmkdocs new my-project\ncd my-project\n\n\n\n\nTake a moment to review the initial project that has been created for you.\n\n\n\n\nThere's a single configuration file named \nmkdocs.yml\n, and a folder named\n\ndocs\n that will contain your documentation source files. Right now the \ndocs\n\nfolder just contains a single documentation page, named \nindex.md\n.\n\n\nMkDocs comes with a built-in dev-server that lets you preview your documentation\nas you work on it. Make sure you're in the same directory as the \nmkdocs.yml\n\nconfiguration file, and then start the server by running the \nmkdocs serve\n\ncommand:\n\n\n$ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\n[I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000\n[I 160402 15:50:43 handlers:58] Start watching changes\n[I 160402 15:50:43 handlers:60] Start detecting changes\n\n\n\n\nOpen up \nhttp://127.0.0.1:8000/\n in your browser, and you'll see the default\nhome page being displayed:\n\n\n\n\nThe dev-server also supports auto-reloading, and will rebuild your documentation\nwhenever anything in the configuration file, documentation directory, or theme\ndirectory changes.\n\n\nOpen the \ndocs/index.md\n document in your text editor of choice, change the\ninitial heading to \nMkLorum\n, and save your changes. Your browser will\nauto-reload and you should see your updated documentation immediately.\n\n\nNow try editing the configuration file: \nmkdocs.yml\n. Change the\n\nsite_name\n setting to \nMkLorum\n and save the file.\n\n\nsite_name: MkLorum\n\n\n\n\nYour browser should immediately reload, and you'll see your new site name take\neffect.\n\n\n\n\nAdding pages\n\n\nNow add a second page to your documentation:\n\n\ncurl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md\n\n\n\n\nAs our documentation site will include some navigation headers, you may want to\nedit the configuration file and add some information about the order, title, and\nnesting of each page in the navigation header by adding a \npages\n\nsetting:\n\n\nsite_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\n\n\n\n\nSave your changes and you'll now see a navigation bar with \nHome\n and \nAbout\n\nitems on the left as well as \nSearch\n, \nPrevious\n, and \nNext\n items on the\nright.\n\n\n\n\nTry the menu items and navigate back and forth between pages. Then click on\n\nSearch\n. A search dialog will appear, allowing you to search for any text on\nany page. Notice that the search results include every occurrence of the search\nterm on the site and links directly to the section of the page in which the\nsearch term appears. You get of all that with no effort or configuration on your\npart!\n\n\n\n\nTheming our documentation\n\n\nNow change the configuration file to alter how the documentation is displayed by\nchanging the theme. Edit the \nmkdocs.yml\n file and add a \ntheme\n setting:\n\n\nsite_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\ntheme: readthedocs\n\n\n\n\nSave your changes, and you'll see the ReadTheDocs theme being used.\n\n\n\n\nChanging the Favicon Icon\n\n\nBy default, MkDocs uses the \nMkDocs favicon\n icon. To use a different icon, create\nan \nimg\n subdirectory in your \ndocs_dir\n and copy your custom \nfavicon.ico\n file\nto that directory. MkDocs will automatically detect and use that file as your\nfavicon icon.\n\n\nBuilding the site\n\n\nThat's looking good. You're ready to deploy the first pass of your \nMkLorum\n\ndocumentation. First build the documentation:\n\n\nmkdocs build\n\n\n\n\nThis will create a new directory, named \nsite\n. Take a look inside the\ndirectory:\n\n\n$ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml\n\n\n\n\nNotice that your source documentation has been output as two HTML files named\n\nindex.html\n and \nabout/index.html\n. You also have various other media that's\nbeen copied into the \nsite\n directory as part of the documentation theme. You\neven have a \nsitemap.xml\n file and \nmkdocs/search_index.json\n.\n\n\nIf you're using source code control such as \ngit\n you probably don't want to\ncheck your documentation builds into the repository. Add a line containing\n\nsite/\n to your \n.gitignore\n file.\n\n\necho \"site/\" >> .gitignore\n\n\n\n\nIf you're using another source code control tool you'll want to check its\ndocumentation on how to ignore specific directories.\n\n\nAfter some time, files may be removed from the documentation but they will still\nreside in the \nsite\n directory. To remove those stale files, just run \nmkdocs\n\nwith the \n--clean\n switch.\n\n\nmkdocs build --clean\n\n\n\n\nOther Commands and Options\n\n\nThere are various other commands and options available. For a complete list of\ncommands, use the \n--help\n flag:\n\n\nmkdocs --help\n\n\n\n\nTo view a list of options available on a given command, use the \n--help\n flag\nwith that command. For example, to get a list of all options available for the\n\nbuild\n command run the following:\n\n\nmkdocs build --help\n\n\n\n\nDeploying\n\n\nThe documentation site that you just built only uses static files so you'll be\nable to host it from pretty much anywhere. \nGitHub project pages\n and \nAmazon\nS3\n may be good hosting options, depending upon your needs. Upload the contents\nof the entire \nsite\n directory to wherever you're hosting your website from and\nyou're done. For specific instructions on a number of common hosts, see the\n\nDeploying your Docs\n page.\n\n\nGetting help\n\n\nTo get help with MkDocs, please use the \ndiscussion group\n, \nGitHub issues\n or\nthe MkDocs IRC channel \n#mkdocs\n on freenode.",
            "title": "Home"
        },
        {
            "location": "/#mkdocs",
            "text": "Project documentation with\u00a0Markdown.",
            "title": "MkDocs"
        },
        {
            "location": "/#overview",
            "text": "MkDocs is a  fast ,  simple  and  downright gorgeous  static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.",
            "title": "Overview"
        },
        {
            "location": "/#host-anywhere",
            "text": "MkDocs builds completely static HTML sites that you can host on GitHub pages,\nAmazon S3, or  anywhere  else you choose.",
            "title": "Host anywhere"
        },
        {
            "location": "/#great-themes-available",
            "text": "There's a stack of good looking themes available for MkDocs. Choose between\nthe built in themes:  mkdocs  and  readthedocs , select one of the 3rd\nparty themes in the  MkDocs wiki , or  build your own .",
            "title": "Great themes available"
        },
        {
            "location": "/#preview-your-site-as-you-work",
            "text": "The built-in dev-server allows you to preview your documentation as you're\nwriting it. It will even auto-reload and refresh your browser whenever you save\nyour changes.",
            "title": "Preview your site as you work"
        },
        {
            "location": "/#easy-to-customize",
            "text": "Get your project documentation looking just the way you want it by customizing\nthe theme.",
            "title": "Easy to customize"
        },
        {
            "location": "/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/#install-with-a-package-manager",
            "text": "If you have and use a package manager (such as  apt-get ,  dnf ,  homebrew , yum ,  chocolatey , etc.) to install packages on your system, then you may\nwant to search for a \"MkDocs\" package and, if a recent version is available,\ninstall it with your package manager (check your system's documentation for\ndetails). That's it, you're done! Skip down to  Getting Started .  If your package manager does not have a recent \"MkDocs\" package, you can still\nuse your package manager to install \"Python\" and \"pip\". Then you can use pip to install MkDocs .",
            "title": "Install with a Package Manager"
        },
        {
            "location": "/#manual-installation",
            "text": "In order to manually install MkDocs you'll need  Python  installed on your\nsystem, as well as the Python package manager,  pip . You can check if you have\nthese already installed from the command line:  $ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2  MkDocs supports Python versions 2.7, 3.3, 3.4, 3.5 and pypy.",
            "title": "Manual Installation"
        },
        {
            "location": "/#installing-python",
            "text": "Install  Python  by downloading an installer appropriate for your system from python.org  and running it.  !!! Note  If you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).\n\n![Add Python to PATH](img/win-py-install.png)",
            "title": "Installing Python"
        },
        {
            "location": "/#installing-pip",
            "text": "If you're using a recent version of Python, the Python package manager,  pip ,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:  pip install --upgrade pip  If you need to install  pip  for the first time, download  get-pip.py .\nThen run the following command to install it:  python get-pip.py",
            "title": "Installing pip"
        },
        {
            "location": "/#installing-mkdocs",
            "text": "Install the  mkdocs  package using pip:  pip install mkdocs  You should now have the  mkdocs  command installed on your system. Run  mkdocs\n--version  to check that everything worked okay.  $ mkdocs --version\nmkdocs, version 0.15.3  !!! Note\n    If you are using Windows, some of the above commands may not work\n    out-of-the-box.  A quick solution may be to preface every Python command with `python -m`\nlike this:\n\n    python -m pip install mkdocs\n    python -m mkdocs\n\nFor a more permanent solution, you may need to edit your `PATH` environment\nvariable to include the `Scripts` directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example `C:\\Python34\\`), open the\n`Tools`, then `Scripts` folder, and run the `win_add2path.py` file by double\nclicking on it. Alternatively, you can [download][a2p] the script and run it\n(`python win_add2path.py`).",
            "title": "Installing MkDocs"
        },
        {
            "location": "/#getting-started",
            "text": "Getting started is super easy.  mkdocs new my-project\ncd my-project  Take a moment to review the initial project that has been created for you.   There's a single configuration file named  mkdocs.yml , and a folder named docs  that will contain your documentation source files. Right now the  docs \nfolder just contains a single documentation page, named  index.md .  MkDocs comes with a built-in dev-server that lets you preview your documentation\nas you work on it. Make sure you're in the same directory as the  mkdocs.yml \nconfiguration file, and then start the server by running the  mkdocs serve \ncommand:  $ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\n[I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000\n[I 160402 15:50:43 handlers:58] Start watching changes\n[I 160402 15:50:43 handlers:60] Start detecting changes  Open up  http://127.0.0.1:8000/  in your browser, and you'll see the default\nhome page being displayed:   The dev-server also supports auto-reloading, and will rebuild your documentation\nwhenever anything in the configuration file, documentation directory, or theme\ndirectory changes.  Open the  docs/index.md  document in your text editor of choice, change the\ninitial heading to  MkLorum , and save your changes. Your browser will\nauto-reload and you should see your updated documentation immediately.  Now try editing the configuration file:  mkdocs.yml . Change the site_name  setting to  MkLorum  and save the file.  site_name: MkLorum  Your browser should immediately reload, and you'll see your new site name take\neffect.",
            "title": "Getting Started"
        },
        {
            "location": "/#adding-pages",
            "text": "Now add a second page to your documentation:  curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md  As our documentation site will include some navigation headers, you may want to\nedit the configuration file and add some information about the order, title, and\nnesting of each page in the navigation header by adding a  pages \nsetting:  site_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md  Save your changes and you'll now see a navigation bar with  Home  and  About \nitems on the left as well as  Search ,  Previous , and  Next  items on the\nright.   Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on\nany page. Notice that the search results include every occurrence of the search\nterm on the site and links directly to the section of the page in which the\nsearch term appears. You get of all that with no effort or configuration on your\npart!",
            "title": "Adding pages"
        },
        {
            "location": "/#theming-our-documentation",
            "text": "Now change the configuration file to alter how the documentation is displayed by\nchanging the theme. Edit the  mkdocs.yml  file and add a  theme  setting:  site_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\ntheme: readthedocs  Save your changes, and you'll see the ReadTheDocs theme being used.",
            "title": "Theming our documentation"
        },
        {
            "location": "/#changing-the-favicon-icon",
            "text": "By default, MkDocs uses the  MkDocs favicon  icon. To use a different icon, create\nan  img  subdirectory in your  docs_dir  and copy your custom  favicon.ico  file\nto that directory. MkDocs will automatically detect and use that file as your\nfavicon icon.",
            "title": "Changing the Favicon Icon"
        },
        {
            "location": "/#building-the-site",
            "text": "That's looking good. You're ready to deploy the first pass of your  MkLorum \ndocumentation. First build the documentation:  mkdocs build  This will create a new directory, named  site . Take a look inside the\ndirectory:  $ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml  Notice that your source documentation has been output as two HTML files named index.html  and  about/index.html . You also have various other media that's\nbeen copied into the  site  directory as part of the documentation theme. You\neven have a  sitemap.xml  file and  mkdocs/search_index.json .  If you're using source code control such as  git  you probably don't want to\ncheck your documentation builds into the repository. Add a line containing site/  to your  .gitignore  file.  echo \"site/\" >> .gitignore  If you're using another source code control tool you'll want to check its\ndocumentation on how to ignore specific directories.  After some time, files may be removed from the documentation but they will still\nreside in the  site  directory. To remove those stale files, just run  mkdocs \nwith the  --clean  switch.  mkdocs build --clean",
            "title": "Building the site"
        },
        {
            "location": "/#other-commands-and-options",
            "text": "There are various other commands and options available. For a complete list of\ncommands, use the  --help  flag:  mkdocs --help  To view a list of options available on a given command, use the  --help  flag\nwith that command. For example, to get a list of all options available for the build  command run the following:  mkdocs build --help",
            "title": "Other Commands and Options"
        },
        {
            "location": "/#deploying",
            "text": "The documentation site that you just built only uses static files so you'll be\nable to host it from pretty much anywhere.  GitHub project pages  and  Amazon\nS3  may be good hosting options, depending upon your needs. Upload the contents\nof the entire  site  directory to wherever you're hosting your website from and\nyou're done. For specific instructions on a number of common hosts, see the Deploying your Docs  page.",
            "title": "Deploying"
        },
        {
            "location": "/#getting-help",
            "text": "To get help with MkDocs, please use the  discussion group ,  GitHub issues  or\nthe MkDocs IRC channel  #mkdocs  on freenode.",
            "title": "Getting help"
        }
    ]
}